name: cisTEM CI

on:
  push:
    branches: main
  pull_request:
    branches: main

jobs:
  build:
    continue-on-error: false
    strategy:
      fail-fast: true
      matrix:
        configure_as: [debug, release]
        include:
          - configure_as: debug
            cxx: g++
            cc: gcc
            build_flags: "--disable-staticmode --enable-openmp --enable-debugmode"
          - configure_as: release
            cxx: g++
            cc: gcc
            build_flags: "--disable-staticmode --enable-openmp"
          
    runs-on: ubuntu-20.04
    container: 
      image: bhimesbhimes/cistem_build_env:v1.1
      options: --user root
    outputs:
      version: ${{ steps.configure.outputs.version }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: regenerate_project
      run: ./regenerate_project.b
    - name: configure
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
      run: |
        mkdir -p build/${{ matrix.configure_as }} 
        cd build/${{ matrix.configure_as }} 
        echo $CC
        echo $CXX
        ../../configure  --enable-experimental ${{matrix.build_flags}} --with-wx-config=wx-config  --enable-samples
        VERSION=$(cat config.log | grep CISTEM_VERSION_TEXT | cut -d' ' -f3 | tr -d '"')
        echo "::set-output name=version::$VERSION" 
    - uses: ammaraskar/gcc-problem-matcher@master
    - name: make 
      run: |
        scripts/cistem_make.sh build/${{ matrix.configure_as }} 2
        cp scripts/testing/test_and_benchmark.sh build/${{ matrix.configure_as }}/src/
    - name: clean up
      run: |
        cd build/${{ matrix.configure_as }}
        rm -r src/core
        rm -r src/gui
        rm -r src/programs
    - name: Create binary artifact
      uses: actions/upload-artifact@v2
      with: 
        name: cistem_binaries_${{ matrix.configure_as }}
        path: build/${{ matrix.configure_as }}/src

    - name: Console test
      run: |
        chmod +x *
        ./console_test 
        ./test_and_benchmark.sh ./
        
    # chmod is redundant, but to keep this independent of Console test we keep it.
    - name: Samples functional testing
      run: |
        cd build/${{ matrix.configure_as }}/src 
        chmod +x samples_functional_testing
        ./samples_functional_testing

    # chmod is redundant, but to keep this independent of Console test we keep it.
    - name: Unit tests
      run: |
        cd build/${{ matrix.configure_as }}/src 
        chmod +x unit_test_runner
        ./unit_test_runner
  # console_test:
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       compiler: [gcc]
  #   name: Console test
  #   needs: build
  #   runs-on: ubuntu-20.04
  #   steps:
  #   - name: Download artifact
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: cistem_binaries_${{ matrix.configure_as }}
  #   - name: Install fftw3
  #     run: sudo apt-get install -y libfftw3-dev
  #   - name: Fix permissions
  #     run: chmod +x *
  #   - name: test console_test
  #     continue-on-error: false
  #     run: ./console_test 
  #   - name: run benchmark
  #     run: ./test_and_benchmark.sh ./
  #   - name: Create image artifact
  #     uses: actions/upload-artifact@v2
  #     with: 
  #       name: test_images
  #       path: /tmp/*.mrc

  samples_functional_testing:
    strategy:
      fail-fast: true
      matrix:
        configure_as: [debug, release]
    name: Samples functional testing
    needs: build
    runs-on: ubuntu-20.04
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: cistem_binaries_${{ matrix.configure_as }}
    - name: Install fftw3
      run: sudo apt-get install -y libfftw3-dev 
    - name: test samples_functional_testing
      continue-on-error: false
      run: |
        chmod +x samples_functional_testing
        ./samples_functional_testing

